## Metadata
`id` **Integer** *read only* the system generated id for a transition.

`name` **String**

`require_murmur` **Boolean** indicates whether a murmur is required to execute this transition.

`transition_execution_url` **String** URL to execute this transition

`user_input_required` **Array** all of the required property's attributes.

`user_input_optional` **Array** all of the optionally required property's attributes.

`if_card_has_properties` **Array** all properties which are required to have a specific value for the transition to be executed, along with the value.

`if_card_has_properties_set` **Array** all properties which are required to be "(not set)" for the transition to be executed.

`will_set_card_properties` **Array** returns all properties which will be set to a specific value when the transition is executed, along with the value.

`only_available_for_users` **Array** all users for which this transition will be available. If `only_available_for_users` and `only_available_for_groups` are both missing, the transition is available for all team members.

`only_available_for_groups` **Array** all user groups for which this transition will be available. If `only_available_for_users` and `only_available_for_groups` are both missing, the transition is available for all team members.

`card_type` **String** card type associated with this transition. If missing, the transition can be executed against any card type.

`to_remove_from_trees_with_children` **Array** all trees which the card and its children will be removed from when the transition is executed.

`to_remove_from_trees_without_children` **Array** all trees which the card will be removed from when the transition is executed.

## Get All Transitions for a Project
```shell
GET 

http://yourname:password@your.mingle.server:8080/api/v2/projects/test_project/transitions.xml
```

```ruby
require 'net/http'
require 'net/https'
require 'time'
require 'api-auth'
require 'json'

URL = 'https://<instance name>.mingle-api.thoughtworks.com/api/v2/projects/test_project/transitions.xml'
OPTIONS = {:access_key_id => '<MINGLE USERNAME>', :access_secret_key => '<MINGLE HMAC KEY>'}

def http_get(url, options={})
    uri = URI.parse(url)
    
    http = Net::HTTP.new(uri.host, uri.port)
    
    if uri.scheme == 'https'
      http.use_ssl = true
      if options[:skip_ssl_verify]
        http.verify_mode = OpenSSL::SSL::VERIFY_NONE
      end
    end

    request = Net::HTTP::Get.new(uri.request_uri)

    if options[:access_key_id]
      ApiAuth.sign!(request, options[:access_key_id], options[:access_secret_key])
    end

    response = http.request(request)

    all_transitions = response.body

    puts all_transitions

     if response.code.to_i > 300
      raise StandardError, <<-ERROR
      Request URL: #{url}
      Response: #{response.code}
      Response Message: #{response.message}
      Response Headers: #{response.to_hash.inspect}
      Response Body: #{response.body}
      ERROR
  end
end

http_get(URL, OPTIONS)
```

You can get all the transitions in a project!

## Get Executable Transitions per Card
```shell
GET

http://yourname:password@your.mingle.server:8080/api/v2/projects/project_identifier/cards/1/transitions.xml
```

```ruby
require 'net/http'
require 'net/https'
require 'time'
require 'api-auth'
require 'json'

URL = 'https://<instance name>.mingle-api.thoughtworks.com/api/v2/projects/test_project/cards/1/transitions.xml'
OPTIONS = {:access_key_id => '<MINGLE USERNAME>', :access_secret_key => '<MINGLE HMAC KEY>'}

def http_get(url, options={})
    uri = URI.parse(url)
    
    http = Net::HTTP.new(uri.host, uri.port)
    
    if uri.scheme == 'https'
      http.use_ssl = true
      if options[:skip_ssl_verify]
        http.verify_mode = OpenSSL::SSL::VERIFY_NONE
      end
    end

    request = Net::HTTP::Get.new(uri.request_uri)

    if options[:access_key_id]
      ApiAuth.sign!(request, options[:access_key_id], options[:access_secret_key])
    end

    response = http.request(request)

    all_transitions = response.body

    puts all_transitions

     if response.code.to_i > 300
      raise StandardError, <<-ERROR
      Request URL: #{url}
      Response: #{response.code}
      Response Message: #{response.message}
      Response Headers: #{response.to_hash.inspect}
      Response Body: #{response.body}
      ERROR
  end
end

http_get(URL, OPTIONS)
```

You can get transitions that are available to execute on each card and what must be supplied to execute that transition; such as names of required/optionally required property name.

## Get a Single Transition
```shell
GET

http://yourname:password@your.mingle.server:8080/api/v2/projects/test_project/transitions/1.xml
```

```ruby
require 'net/http'
require 'net/https'
require 'time'
require 'api-auth'
require 'json'

URL = 'https://<instance name>.mingle-api.thoughtworks.com/api/v2/projects/test_project/transitions/1.xml'
OPTIONS = {:access_key_id => '<MINGLE USERNAME>', :access_secret_key => '<MINGLE HMAC KEY>'}

def http_get(url, options={})
    uri = URI.parse(url)
    
    http = Net::HTTP.new(uri.host, uri.port)
    
    if uri.scheme == 'https'
      http.use_ssl = true
      if options[:skip_ssl_verify]
        http.verify_mode = OpenSSL::SSL::VERIFY_NONE
      end
    end

    request = Net::HTTP::Get.new(uri.request_uri)

    if options[:access_key_id]
      ApiAuth.sign!(request, options[:access_key_id], options[:access_secret_key])
    end

    response = http.request(request)

    all_transitions = response.body

    puts all_transitions

     if response.code.to_i > 300
      raise StandardError, <<-ERROR
      Request URL: #{url}
      Response: #{response.code}
      Response Message: #{response.message}
      Response Headers: #{response.to_hash.inspect}
      Response Body: #{response.body}
      ERROR
  end
end

http_get(URL, OPTIONS)
```

## Execute a Transition
```shell
POST

http://yourname:password@your.mingle.server:8080/api/v2/projects/test_project/transition_executions/1.xml

transition_execution[card]=1
transition_execution[murmur]="Transition this card"
transition_execution[properties][][name]="Status"
transition_execution[properties][][value]="Completed"
```

```ruby
require 'net/http'
require 'net/https'
require 'time'
require 'api-auth'
require 'json'

URL = 'https://<instance name>.mingle-api.thoughtworks.com/api/v2/projects/test_project/transition_executions/1.xml'
OPTIONS = {:access_key_id => '<MINGLE USERNAME>', :access_secret_key => '<MINGLE HMAC KEY>'}
PARAMS = { 
  :transition_execution => { 
    :card => '1',  
    :murmur => 'Random Transition',
    :properties => [{:name => 'Story Status', :value => 'Completed'}] 
  }
}

def http_post(url, params, options={})
    uri = URI.parse(url)
    http = Net::HTTP.new(uri.host, uri.port)
    if uri.scheme == 'https'
      http.use_ssl = true
      if options[:skip_ssl_verify]
        http.verify_mode = OpenSSL::SSL::VERIFY_NONE
      end
    end
    body = params.to_json

    request = Net::HTTP::Post.new(uri.request_uri)
    request.body = body

    request['Content-Type'] = 'application/json'
    request['Content-Length'] = body.bytesize

    if options[:access_key_id]
      ApiAuth.sign!(request, options[:access_key_id], options[:access_secret_key])
    end

    response = http.request(request)

    executed = response.body
    
    puts executed

    if response.code.to_i > 300
      raise StandardError, <<-ERROR
      Request URL: #{url}
      Response: #{response.code}
      Response Message: #{response.message}
      Response Headers: #{response.to_hash.inspect}
      Response Body: #{response.body}
      ERROR
  end
end

http_post(URL, PARAMS, OPTIONS)
```

The above is an example of a POST to execute a transition called "Random Transition" on a card with the number `1`; in a project with identifier `test_project`. 

The `transition_execution[properties]` parameter can be understood as follows. 

The first value for `transition_execution[properties][][name]`is "Status" and the first value in `transition_execution[properties][][value]` is "Completed". 

This means that upon execution of the transition, the value of "fixed in revision" will be set to "release 1 branch". The second value for `transition_execution[properties][][name]` is "fixed in revision" and the corresponding value in `transition_execution[properties][][value]` is "1234". 

Upon execution of the transition, the value of "fixed in revision" will be set to "1234". This can be repeated for as many properties that were configured as `(require user input)`or `(user input optional)` when the transition was setup.

