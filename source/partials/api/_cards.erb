## Metadata
`name` **String**

`description` **String** the HTML that Mingle renders for the card description.

`type` **Resource** name of the card type for each card; string.

`id` **Integer** *read only* system assigned unique identifier for a card.

`number` **Integer** *read only* unique identifier of a card within a project - use this for both GET and PUT.

`project` **Resource** name and identifier of a project a card belongs to; both **Strings**.

`version` **Integer** *read only* current card version. You can specify the version to get history version of the card.

`project_card_rank` **Integer** *read only* the rank of the card in a project.

`created_on` **Datetime** *read only* date and time of creating card.

`modified_on` **Datetime** *read only* date and time of last modification.

`modified_by` **Resource** *read only* name and login id of user who is the last to modify the card; both **String** 

`created_by` **Resource** *read only* name and login id of user who created the card; both **String**

`properties` **Array** property: **Resource** name and a current value for each card property defined for current card's card type are listed; 

Data type will depend on the property while property name is always **String**. The property also includes attributes about the property type_description and whether or not it is hidden.

`tags` **String** *read only* comma-delimited list of tags associated with the card.

`rendered_description` **Resource** Link to rendered card description as HTML.

## Create a New Card
```ruby
require 'net/http'
require 'net/https'
require 'time'
require 'api-auth'
require 'json'

URL = '<MINGLE RESOURCE URL>'
PARAMS = { :card => { :type => "Story", :name => "Test Story Card" }}
OPTIONS = {:access_key_id => '<MINGLE USERNAME>', :access_secret_key => '<MINGLE HMAC KEY>'}

def http_post(url, params, options={})
    uri = URI.parse(url)
    http = Net::HTTP.new(uri.host, uri.port)
    if uri.scheme == 'https'
      http.use_ssl = true
      if options[:skip_ssl_verify]
        http.verify_mode = OpenSSL::SSL::VERIFY_NONE
      end
    end
    body = params.to_json

    request = Net::HTTP::Post.new(uri.request_uri)
    request.body = body

    request['Content-Type'] = 'application/json'
    request['Content-Length'] = body.bytesize


    if options[:access_key_id]
      ApiAuth.sign!(request, options[:access_key_id], options[:access_secret_key])
    end

    response = http.request(request)

    if response.code.to_i > 300
      raise UnexpectedResponseError, <<-ERROR
      \nRequest URL: #{url}
      Response: #{response.code} #{response.message}
      Response Headers: #{response.to_hash.inspect}\nResponse Body: #{response.body}"
      ERROR
  end
end
```

```shell
curl -x POST -D 'card[name]=Test Story Card card[type]=Story' <MINGLE RESOURCE URL>
```

To create a new card, you can send a POST request with two necessary parameters - card type and name. 

`card[name]` **Required** 

`card[type]` **Required** 

`card[description]`

`card[properties][][name]` 

`card[properties][][value]`

## Find a Set of Cards

`view` The name of a saved view, whose cards are to be returned back

`page` A specific set of 25 results, if the list contains more than 25 results. The first 25 results are page 1. The next 25 are page 2, and so on. 
Requesting the contents of a page of data that is past the last valid page, returns the data on the last valid page and not an empty array. If it is 
not supplied, the default value is "1".

`filters[]` Each value for this parameter represents a filter applied to the list of cards. You can also use a standard filter or a MQL filter with this parameter.

`sort` The property whose value will be used to sort the cards returned

`order` ASC/DESC, whether the cards will be returned in Ascending or Descending order of the sort property 

`tagged_with` A comma separated list of tags that will be used to further filter the list of cards in addition to the filters

**Example**

`filters[]=[Type][is][story]`

`filters[]=[Status][is not][accepted]`

`sort=status`

`order=ASC`


```javascript
  function getCardsXml (){
      $j.ajax({
      url: 'https://sarah.mingle.thoughtworks.com/api/v2/projects/clix/cards.xml',
      data: null,
      success: function(data, textStatus, jqXHR) {
        console.log("Response: " + data.responseText);
        console.log("Success!!!!");
      },
      error: function(jqXHR, textStatus, errorThrown) {
        console.log(":'-(");
        console.log("Response: " + jqXHR.responseText);
        console.log("HTTP stats: " + textStatus);
        console.log("error: " + errorThrown);
      },
      complete: function(jqXHR, textStatus) {
        console.log("Complete");
        console.log(textStatus);
    }
    });
  };       
```

## Find a Single Card

```curl
https://instance.mingle.thoughtworks.com/api/v2/project/test/1.xml
```

You can find a single card by submitting a GET request to the card's API url 

## Update a Card

You can update different attributes on a card such as card name, card description, card type or properties that are available on card via card resource API.

### How to update different kinds of properties

**Managed/Unmanaged Text**: Use the text value of the value you would like to update the value to

**Managed/Unmanaged Numbers**: Use the numeric value you would like to set the property to

**Date**: Use the date string in the project date format

**Team Member**: Use the id of the user you would like to update the value to. You can obtain the user id by looking up the user using the API.
Card: Use the card number of the card you would like to update the value to.

## Get Card Description as HTML

From a card resource, follow the `rendered_description` resource to retrieve the rendered description for a card as HTML. Notice that `rendered_description` does not contain any styling information. 

You may reference the Mingle stylesheet, found on every Mingle page, when displaying rendered_description if you would like it to be styled as is in Mingle. If there are macros in the description, the macros will be rendered as part of the rendered_description. Any JavaScript in the rendered description will be removed from `rendered_description`. 
