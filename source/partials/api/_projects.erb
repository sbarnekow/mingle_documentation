The structure of a project resource and its attributes are described below. 

System generated fields such as `created_at` are provided only as information about the project and cannot be updated through the API.

*But can it be deleted?* 

While projects cannot be directly deleted, it can be marked for deletion by setting `marked_for_deletion` to true in an update call. 

Mingle will then take care of deleting the resource.

## Metadata

`name` **String**

`identifier` **String**

`description` **String**

`created_at` **Datetime** *read only* date and time of creating project

`updated_at` **Datetime** *read only* date and time of last modification

`created_by` **Resource** *read only* the name and login of the user who created this project info; **both String**

`modified_by` **Resource** *read only* the name and login of the user who is the last one modified the project info; **both String**

`keywords` **XML element** card keywords which are used in this project to reference to a card. Contains keyword XML elements, each of which is a string that is the card keyword.


	Examples are shown below

	`template` **Boolean**

	`email_address` **String**

	`email_sender_name` **String**

	`date_format`  **String**

	`time_zone` **String** time zone location name, for example: 'Beijing', 'Pacific Time (US Attributes &  Canada)'.

	`precision` **Integer** [0, 10]

	`anonymous_accessible` **Boolean** whether the project allows anonymous access or not.

	`auto_enroll_user_type` **String** whether the project will have all users as team members. Users can be enrolled as full, readonly or nil.

## Create a New Project

```shell
POST

http://yourname:password@your.mingle.server:8080/api/v2/projects.xml

project[name]="Test Project"
project[identifier]="test_project"      
```


```ruby
require 'net/http'
require 'net/https'
require 'time'
require 'api-auth'
require 'json'

URL = '<MINGLE RESOURCE URL>'
PARAMS = { :project => { :name => "Test Project", :identifier => "test_project" }}
OPTIONS = {:access_key_id => '<MINGLE USERNAME>', :access_secret_key => '<MINGLE HMAC KEY>'}

def http_post(url, params, options={})
    uri = URI.parse(url)
    http = Net::HTTP.new(uri.host, uri.port)
    if uri.scheme == 'https'
      http.use_ssl = true
      if options[:skip_ssl_verify]
        http.verify_mode = OpenSSL::SSL::VERIFY_NONE
      end
    end
    body = params.to_json

    request = Net::HTTP::Post.new(uri.request_uri)
    request.body = body

    request['Content-Type'] = 'application/json'
    request['Content-Length'] = body.bytesize


    if options[:access_key_id]
      ApiAuth.sign!(request, options[:access_key_id], options[:access_secret_key])
    end

    response = http.request(request)

    if response.code.to_i > 300
      raise UnexpectedResponseError, <<-ERROR
      \nRequest URL: #{url}
      Response: #{response.code} #{response.message}
      Response Headers: #{response.to_hash.inspect}\nResponse Body: #{response.body}"
      ERROR
  end
end
```

Project name and project identifier are both required in order to create a new project via the Mingle Project API.

## Find All Projects
```shell
GET

http://yourname:password@your.mingle.server:8080/api/v2/projects.xml

```

```ruby
require 'net/http'
require 'net/https'
require 'time'
require 'api-auth'
require 'json'

URL = 'https://your.mingle.server:8080/api/v2/projects.xml'
OPTIONS = {:access_key_id => '<MINGLE USERNAME>', :access_secret_key => '<MINGLE HMAC KEY>'}

def http_post(url, params, options={})
    uri = URI.parse(url)
    http = Net::HTTP.new(uri.host, uri.port)
    if uri.scheme == 'https'
      http.use_ssl = true
      if options[:skip_ssl_verify]
        http.verify_mode = OpenSSL::SSL::VERIFY_NONE
      end
    end
    body = params.to_json

    request = Net::HTTP::GET.new(uri.request_uri)
    request.body = body

    request['Content-Type'] = 'application/json'
    request['Content-Length'] = body.bytesize


    if options[:access_key_id]
      ApiAuth.sign!(request, options[:access_key_id], options[:access_secret_key])
    end

    response = http.request(request)

    if response.code.to_i > 300
      raise UnexpectedResponseError, <<-ERROR
      \nRequest URL: #{url}
      Response: #{response.code} #{response.message}
      Response Headers: #{response.to_hash.inspect}\nResponse Body: #{response.body}"
      ERROR
  end
end
```

Making GET requests on /api/v2/projects.xml may cause performance issues in a Mingle installation with large number of projects. Please try and use the name_and_id_only parameter described below.


The above is an example of a GET request to a Mingle server running at your.mingle.server, port 8080. The request locates all project resources available on this instance. If you have "Mingle administrator" permissions, you will get all projects on that instance. If not, you will get a list of all projects that you are a member of.

## Find All Project Names and Identifiers

```shell
GET

http://yourname:password@your.mingle.server:8080/api/v2/projects.xml?name_and_id_only
```

The above request returns name and identifier for all project resources available on this instance. If you have "Mingle administrator" permissions, you will get all projects on that instance.
If not, you will get a list of all projects that you are a member of.

This is useful when you want to access the project name and identifier.

## Find a Single Project

```shell
GET

http://yourname:password@your.mingle.server:8080/api/v2/projects/test_project.xml
```

The above is an example of a GET request to a Mingle server running at your.mingle.server, port 8080. The request locates a project with the identifier of "test_project". You have to either have "Mingle administrator" permissions, or be a member of the team to make this call

If you have sufficient permissions to perform the action and the action was successful, you will be returned a location attribute in the header of the response, which is a url from which you can get the project resource that was created.

