The structure of a project resource, and its attributes are described below, along with their data type. Also included with each attribute is whether you are allowed to update the value. System generated fields like `created_at` are provided only as information about the project and cannot be updated through the API.

But can it be deleted? 

While projects cannot be directly deleted, it can be marked for deletion by setting `marked_for_deletion` to true in an update call. Mingle will then take care of deleting the resource.

## Metadata

`name`: String

`identifier`: String; this is used to lookup a project

`description`: String

`created_at`: Date Time; read only, date and time of creating project

`updated_at`: Date Time; read only, date and time of last modification

`created_by`: Resource; the name and login of the user who created this project info; both String, read only

`modified_by`: Resource; the name and login of the user who is the last one modified the project info; both String, read only

`keywords`: XML element; card keywords which are used in this project 
to reference to a card. Contains keyword XML elements, each of which is a string that is the card keyword. 

Examples are shown below

`template`: Boolean.

`email_address`: String.

`email_sender_name`: String.

`date_format`: String.

`time_zone`: String; time zone location name, for example: 'Beijing', 
'Pacific Time (US Attributes &  Canada)'.

`precision`: Integer; [0, 10]

`anonymous_accessible`: Boolean; whether the project allows anonymous 
access or not.

`auto_enroll_user_type`: String; whether the project will have all 
users as team members. Users can be enrolled as full, readonly or nil.

## Create a New Project

```curl
POST
https://instance.mingle-api.thoughtworks.com/api/v2/projects.xml
```

`project[name]` **Required**

`project[identifier]` **Required**

`project[description]`

`project[template]`

`project[email_address]`

`project[email_sender_name]`

`project[date_format]`

`project[time_zone]`

`project[precision]`

## Find All Projects

```curl
GET
https://instance.mingle-api.thoughtworks.com/api/v2/projects.xml
```

Making GET requests on /api/v2/projects.xml may cause performance issues in a Mingle installation with large number of projects. Please try and use the name_and_id_only parameter described below.


The above is an example of a GET request to a Mingle server running at your.mingle.server, port 8080. The request locates all project resources available on this instance. If you have "Mingle administrator" permissions, you will get all projects on that instance. If not, you will get a list of all projects that you are a member of.

## Find All Project Names and Identifiers

```curl
GET
https://instance.mingle-api.thoughtworks.com/api/v2/projects.xml?name_and_id_only
```

The above request returns name and identifier for all project resources available on this instance. If you have "Mingle administrator" permissions, you will get all projects on that instance.
If not, you will get a list of all projects that you are a member of.

This is useful when you want to access the project name and identifier.

## Find a Single Project

```curl
GET
https://instance.mingle-api.thoughtworks.com/api/v2/projects/test_project.xml
```

The above is an example of a GET request to a Mingle server running at your.mingle.server, port 8080. The request locates a project with the identifier of "test_project". You have to either have "Mingle administrator" permissions, or be a member of the team to make this call

If you have sufficient permissions to perform the action and the action was successful, you will be returned a location attribute in the header of the response, which is a url from which you can get the project resource that was created.

