## Structure of the Execute MQL resulting resource
```shell
GET
http://localhost:8080/api/v2/projects/new/cards/execute_mql.xml

**Select Card Properties**
mql=SELECT number, name WHERE 'Iteration - Scheduled' = (Current Iteration)

**Value Query**
mql=SELECT COUNT(*) WHERE Type = story
```
```ruby
require 'net/http'
require 'net/https'
require 'time'
require 'api-auth'
require 'json'

URL = 'https://<instance name>.mingle-api.thoughtworks.com/api/v2/projects/test_project/cards/execute_mql.xml'
OPTIONS = {:access_key_id => '<MINGLE USERNAME>', :access_secret_key => '<MINGLE HMAC KEY>'}
PARAMS = {
  :mql => "SELECT Number, Name where Status = Done"
}

def http_get(url, params, options={})
  uri = URI.parse(url)  
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = true
  body = params.to_json

  request = Net::HTTP::Get.new(uri.request_uri)
  request.body = body
  request['Content-Type'] = 'application/json'
  request['Content-Length'] = body.bytesize

  ApiAuth.sign!(request, options[:access_key_id], options[:access_secret_key])
  response = http.request(request)

  if response.code.to_i > 300
    raise StandardError, <<-ERROR
    Request URL: #{url}
    Response: #{response.code}
    Response Message: #{response.message}
    Response Headers: #{response.to_hash.inspect}
    Response Body: #{response.body}
    ERROR
  end
end

http_get(URL, PARAMS, OPTIONS)
```

MQL is Mingle's SQL-like query language. Execute MQL API allows you to use MQL queries via the API.

We recommend that you familiarize yourself with some MQL before using it via the API.

Unlike other APIs the structure of what is returned in a result resource will differ depending on the MQL that is specified in the request. 

The structure will reflect the properties requested in the MQL. For example, if you select for number and name, the results returned will have the attributes number and name.

Results will be returned in XML format by default. However, Mingle can also return the result in JSON or JSONP format for some resources.

## JSON/JSONP/XML

```shell
    **JSON** 
    URL: /api/v2/projects/project_identifier/cards/execute_mql.json
    
    mql: SELECT number, name WHERE type = Story

    **JSONP**
    URL: /api/v2/projects/project_identifier/cards/execute_mql.json
    
    callback: displayCards
    mql: SELECT number, name WHERE type = Story   
```

To return a JSON object, add the JSON extension to the end of the request, rather than the XML extension.
